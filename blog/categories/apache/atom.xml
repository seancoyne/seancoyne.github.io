<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Apache | n42 Designs]]></title>
  <link href="http://blog.n42designs.com/blog/categories/apache/atom.xml" rel="self"/>
  <link href="http://blog.n42designs.com/"/>
  <updated>2014-10-14T11:57:58-04:00</updated>
  <id>http://blog.n42designs.com/</id>
  <author>
    <name><![CDATA[Sean Coyne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ColdFusion 9 and Mod_jrun on Mac OS X Yosemite With Apache 2.4]]></title>
    <link href="http://blog.n42designs.com/blog/2014/10/13/coldfusion-9-and-modjrun-on-mac-os-x-yosemite-with-apache-24/"/>
    <updated>2014-10-13T19:30:00-04:00</updated>
    <id>http://blog.n42designs.com/blog/2014/10/13/coldfusion-9-and-modjrun-on-mac-os-x-yosemite-with-apache-24</id>
    <content type="html"><![CDATA[<p>OS X Yosemite updates the included Apache HTTP server from 2.2 to 2.4. The ColdFusion 9 connector installs a version of mod_jrun which has been compiled for Apache 2.2. Using <a href="https://research.g0blin.co.uk/mod_jrun-on-apache-2-4-ubuntu-14-04-coldfusion-9/">this article</a> I was able to recompile the connector for Apache 2.4 and get ColdFusion 9 running with Apache 2.4. <a href="https://www.dropbox.com/s/oxffau75ps9q1zv/mod_jrun24.so.zip?dl=1">Here</a> you will find a zipped version of the compiled connector so you can skip recompiling it yourself. Simply unzip and move the .so file to the desired location on your Mac and update your Apache configuration to point to it.</p>

<p>So:</p>

<p><code>LoadModule jrun_module /Applications/JRun4/lib/wsconfig/1/mod_jrun22.so</code></p>

<p>becomes</p>

<p><code>LoadModule jrun_module /Applications/JRun4/lib/wsconfig/1/mod_jrun24.so</code></p>

<p>You may find you need to update other Apache configuration settings. You can find additional information on upgrading from Apache 2.2 to 2.4 in the <a href="http://httpd.apache.org/docs/2.4/upgrading.html">Apache HTTP Server Documentation</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running ColdFusion 10 on OS X Mavericks]]></title>
    <link href="http://blog.n42designs.com/blog/2013/10/23/running-coldfusion-10-on-os-x-mavericks/"/>
    <updated>2013-10-23T12:03:00-04:00</updated>
    <id>http://blog.n42designs.com/blog/2013/10/23/running-coldfusion-10-on-os-x-mavericks</id>
    <content type="html"><![CDATA[<p>Running ColdFusion 10 on OS X Mavericks is possible, but not straightforward.  Unfortunately, it seems the web server connector does not work with Apache 2.2.24 which ships with Mavericks.  A bug has been logged for this here: <a href="https://bugbase.adobe.com/index.cfm?event=bug&amp;amp;id=3653076">https://bugbase.adobe.com/index.cfm?event=bug&amp;id=3653076</a>.  Please vote for it.
There are a couple of issues I had with Mavericks and ColdFusion 10 (CF 9 works fine for me for what it is worth).
First, ColdFusion wouldn&rsquo;t start because Mavericks removed Java 6.  I had to update 3 files to fix this:</p>

<p><code>/Applications/ColdFusion10/cfusion/bin/jvm.config</code>
<code>/Applications/ColdFusion10/cfusion/bin/coldfusion</code>
<code>/Applications/ColdFusion10/cfusion/runtime/bin/wsconfig_jvm.config</code></p>

<p>In each of these, there was a setting to set the Java home path.  It was set to the old location for Java 6.  I updated these to point to Java 7.  For me this was:</p>

<p><code>/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home</code></p>

<p>This was after installing the <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">latest Updater 45 JDK from Oracle&rsquo;s website</a>.</p>

<p>Once I made these changes ColdFusion started fine.</p>

<p>The next issue is with the Connector.  Adobe created a customized version of mod_jk to go along with their customized version of Tomcat.  Because of this, recompiling mod_jk is not going to work. <del>We&rsquo;ll have to wait for an updated version from Adobe.</del> (<strong>EDIT:</strong> See Mike&rsquo;s comment <a href="#c1BCFBE61-BADC-4171-8532B7B3B8544650">below</a> for a solution!) Until then you can either use the built in web server or install MAMP PRO which ships with Apache 2.2.22 (same as Mountain Lion) and then configure using the web server connector.</p>

<p>I followed the recommendations in this blog post: <a href="http://www.brilang.com/2012/06/installing-coldfusion-10-under-mamp-pro-2-on-os-x-lion/1137">http://www.brilang.com/2012/06/installing-coldfusion-10-under-mamp-pro-2-on-os-x-lion/1137</a> to configure MAMP PRO.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVN, Apache, and Mod_caucho, Oh My]]></title>
    <link href="http://blog.n42designs.com/blog/2009/11/30/svn-apache-and-modcaucho-oh-my/"/>
    <updated>2009-11-30T10:01:00-05:00</updated>
    <id>http://blog.n42designs.com/blog/2009/11/30/svn-apache-and-modcaucho-oh-my</id>
    <content type="html"><![CDATA[<p>I recently set up a new <a href="http://www.viviotech.net/?rid=n42designs">Viviotech</a> VPS and ran into an issue that was easy to fix once I realized what was happening, but difficult to debug.</p>

<p>I set up Railo running on the Resin server using Apache as a front end with mod_caucho. In my <code>httpd.conf</code> file I had the following lines:</p>

<p><div><script src='https://gist.github.com/8810530.js'></script>
<noscript><pre><code>LoadModule caucho_module /usr/lib/httpd/modules/mod_caucho.so
ResinConfigServer localhost 6800
CauchoConfigCacheDirectory /tmp
CauchoStatus yes</code></pre></noscript></div>
</p>

<p>This causes Resin to handle all requests from apache. The resin configuration files tell resin which URLs to handle. I also had an SVN server set up so I had a configuration file in <code>/etc/httpd/conf.d/</code> to set up subversion. All my SVN repositories are under the location <code>/svn</code>. Reading SVN repositories worked fine, but I kept getting &ldquo;path not found&rdquo; errors when committing new files. After debugging this for quite a while using Fiddler, and other means, I finally realized that Resin was actually handling the PUT http request and, finding no file, returned a 404.</p>

<p>So to fix this, and simply have Apache handle any request to <code>/svn/</code> I modifed my <code>httpd.conf</code> file as follows:</p>

<p><div><script src='https://gist.github.com/8810539.js'></script>
<noscript><pre><code>LoadModule caucho_module /usr/lib/httpd/modules/mod_caucho.so
&lt;LocationMatch ^((?!/svn/).)*$&gt;
ResinConfigServer localhost 6800
CauchoConfigCacheDirectory /tmp
CauchoStatus yes
&lt;/LocationMatch&gt;</code></pre></noscript></div>
</p>

<p>then restarted Apache.  Now apache handles any requests to <code>/svn/*</code> and Resin handles all other requests. Hopefully this helps future Googlers in need.</p>
]]></content>
  </entry>
  
</feed>
